name: Release

on:
    push:
        tags:
        -   '*.*.*'

defaults:
    run:
        shell: bash

jobs:
    release:
        name: Release
        strategy:
            fail-fast: true
            max-parallel: 1
            matrix:
                python-version: [3.11]
                os: [ubuntu-latest]
        runs-on: ${{ matrix.os }}
        steps:
        -   name: Checkout code
            uses: actions/checkout@v4.1.1
        -   name: Set up Python
            uses: actions/setup-python@v4
            with:
                python-version: ${{ matrix.python-version }}
        -   if: ${{ runner.os == 'Windows' }}
            name: Use GNU tar
            shell: cmd
            run: |
                echo "Adding GNU tar to PATH"
                echo C:\Program Files\Git\usr\bin>>"%GITHUB_PATH%"
        -   name: Install Poetry
            uses: snok/install-poetry@v1
        -   name: Install Poetry Dynamic-Versioning
            run: poetry self add "poetry-dynamic-versioning[plugin]"
        -   name: Check Version
            id: check-version
            run: |
                [[ "$(poetry version --short)" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] || echo prerelease=true >> $GITHUB_OUTPUT
        -   name: Create Release
            uses: ncipollo/release-action@v1
            with:
                artifacts: dist/*
                token: ${{ secrets.GITHUB_TOKEN }}
                draft: false
                prerelease: steps.check-version.outputs.prerelease == 'true'
                allowUpdates: true
                omitNameDuringUpdate: true
                omitBodyDuringUpdate: true
                generateReleaseNotes: true
                replacesArtifacts: false
        -   name: Publish to PyPI
            env:
                POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
            run: poetry publish --build --skip-existing

    change_logs:
        name: Generate Change Logs and Release Notes
        needs: [release]
        runs-on: [ubuntu-latest]
        steps:
        -   name: Checkout
            uses: actions/checkout@v4.1.1
            with:
                fetch-depth: 0
                ref: develop
        -   name: Set up Python 3.11
            uses: actions/setup-python@v4
            with:
                python-version: '3.11'
        -   name: Install Poetry
            uses: snok/install-poetry@v1
        -   name: Install Poetry Dynamic-Versioning
            run: poetry self add "poetry-dynamic-versioning[plugin]"
        -   name: Install Node.js 14
            uses: actions/setup-node@v3
            with:
                node-version: '14'
        -   name: Install GitHub Release Notes
            run: npm install github-release-notes -g
        -   name: Release Notes and Change logs
            run: |
                gren release --token ${{ secrets.PERSONAL_ACCESS_TOKEN }}
                gren changelog --token ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        -   name: Import GPG key
            uses: crazy-max/ghaction-import-gpg@v6
            with:
                gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
                git_user_signingkey: true
                git_commit_gpgsign: true
                git_tag_gpgsign: true
            id: import_gpg
        -   name: Bump Version in Files
            run: poetry dynamic-versioning
        -   name: Get Version
            id: get-version
            run: |
                echo version="$(poetry version --short)" >> $GITHUB_OUTPUT
        -   name: Git Auto Commit
            uses: stefanzweifel/git-auto-commit-action@v4.16.0
            with:
                commit_message: '[skip ci] Update CHANGELOG.md and Release Notes for v${{steps.get-version.outputs.version}}'
                commit_options: -S
                commit_user_name: ${{ steps.import_gpg.outputs.name }}
                commit_user_email: ${{ steps.import_gpg.outputs.email }}
                commit_author: ${{ steps.import_gpg.outputs.name }} <${{ steps.import_gpg.outputs.email }}>
        -   name: Trigger PyLav Cogs workflow
            run: |
                curl -XPOST -u "Drapersniper:${{secrets.PERSONAL_ACCESS_TOKEN}}" -H "Accept: application/vnd.github.everest-preview+json" -H "Content-Type:  application/json" https://api.github.com/repos/PyLav/Red-Cogs/dispatches --data '{"event_type": "on-release", "client_payload": {"version": "${{steps.get-version.outputs.version}}"}}'
